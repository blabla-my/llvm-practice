; ModuleID = 'buffer.c'
source_filename = "buffer.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timespec = type { i64, i64 }

@BUF_SIZE = dso_local global i32 5, align 4
@ring_buffer = dso_local global ptr null, align 8
@read_ptr = dso_local global ptr null, align 8
@write_ptr = dso_local global ptr null, align 8
@stdin = external global ptr, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @init_ring_buffer() #0 {
  %1 = load i32, ptr @BUF_SIZE, align 4
  %2 = sext i32 %1 to i64
  %3 = call noalias ptr @malloc(i64 noundef %2) #6
  store ptr %3, ptr @ring_buffer, align 8
  %4 = load ptr, ptr @ring_buffer, align 8
  %5 = ptrtoint ptr %4 to i64
  store atomic i64 %5, ptr @read_ptr seq_cst, align 8
  %6 = load ptr, ptr @ring_buffer, align 8
  store ptr %6, ptr @write_ptr, align 8
  ret void
}

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @buffer_next(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  store ptr %0, ptr %2, align 8
  %3 = load ptr, ptr @ring_buffer, align 8
  %4 = load ptr, ptr %2, align 8
  %5 = load ptr, ptr @ring_buffer, align 8
  %6 = ptrtoint ptr %4 to i64
  %7 = ptrtoint ptr %5 to i64
  %8 = sub i64 %6, %7
  %9 = add nsw i64 %8, 1
  %10 = load i32, ptr @BUF_SIZE, align 4
  %11 = sext i32 %10 to i64
  %12 = srem i64 %9, %11
  %13 = getelementptr inbounds i8, ptr %3, i64 %12
  ret ptr %13
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @process(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca %struct.timespec, align 8
  store ptr %0, ptr %2, align 8
  %4 = getelementptr inbounds %struct.timespec, ptr %3, i32 0, i32 0
  store i64 0, ptr %4, align 8
  %5 = getelementptr inbounds %struct.timespec, ptr %3, i32 0, i32 1
  store i64 1000000, ptr %5, align 8
  %6 = call i32 @nanosleep(ptr noundef %3, ptr noundef null)
  ret void
}

declare i32 @nanosleep(ptr noundef, ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @producer_main() #0 {
  %1 = alloca ptr, align 8
  %2 = alloca %struct.timespec, align 8
  br label %3

3:                                                ; preds = %28, %0
  %4 = load ptr, ptr @stdin, align 8
  %5 = call i32 @feof(ptr noundef %4) #7
  %6 = icmp ne i32 %5, 0
  %7 = xor i1 %6, true
  br i1 %7, label %8, label %29

8:                                                ; preds = %3
  %9 = load ptr, ptr @write_ptr, align 8
  %10 = call ptr @buffer_next(ptr noundef %9)
  store ptr %10, ptr %1, align 8
  %11 = load ptr, ptr %1, align 8
  %12 = load atomic i64, ptr @read_ptr seq_cst, align 8
  %13 = inttoptr i64 %12 to ptr
  %14 = icmp ne ptr %11, %13
  br i1 %14, label %15, label %28

15:                                               ; preds = %8
  %16 = load ptr, ptr @stdin, align 8
  %17 = call i32 @_IO_getc(ptr noundef %16)
  %18 = trunc i32 %17 to i8
  %19 = load ptr, ptr @write_ptr, align 8
  store i8 %18, ptr %19, align 1
  %20 = load ptr, ptr %1, align 8
  store ptr %20, ptr @write_ptr, align 8
  %21 = getelementptr inbounds %struct.timespec, ptr %2, i32 0, i32 0
  store i64 0, ptr %21, align 8
  %22 = call i32 @rand() #7
  %23 = sext i32 %22 to i64
  %24 = mul i64 100000000, %23
  %25 = udiv i64 %24, 2147483647
  %26 = getelementptr inbounds %struct.timespec, ptr %2, i32 0, i32 1
  store i64 %25, ptr %26, align 8
  %27 = call i32 @nanosleep(ptr noundef %2, ptr noundef null)
  br label %28

28:                                               ; preds = %15, %8
  br label %3, !llvm.loop !6

29:                                               ; preds = %3
  ret void
}

; Function Attrs: nounwind
declare i32 @feof(ptr noundef) #3

declare i32 @_IO_getc(ptr noundef) #2

; Function Attrs: nounwind
declare i32 @rand() #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @consumer_main(ptr noundef %0) #0 {
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  %5 = alloca ptr, align 8
  %6 = alloca i8, align 1
  %7 = alloca ptr, align 8
  %8 = alloca ptr, align 8
  %9 = alloca ptr, align 8
  %10 = alloca i8, align 1
  %11 = alloca %struct.timespec, align 8
  store ptr %0, ptr %2, align 8
  %12 = load ptr, ptr %2, align 8
  %13 = ptrtoint ptr %12 to i32
  store i32 %13, ptr %3, align 4
  store i8 0, ptr %6, align 1
  br label %14

14:                                               ; preds = %1, %45
  %15 = load atomic i64, ptr @read_ptr seq_cst, align 8
  %16 = inttoptr i64 %15 to ptr
  store ptr %16, ptr %8, align 8
  %17 = load ptr, ptr %8, align 8
  %18 = load ptr, ptr @write_ptr, align 8
  %19 = icmp ne ptr %17, %18
  br i1 %19, label %20, label %45

20:                                               ; preds = %14
  %21 = load ptr, ptr %8, align 8
  %22 = load i8, ptr %21, align 1
  store i8 %22, ptr %6, align 1
  %23 = load ptr, ptr %8, align 8
  %24 = call ptr @buffer_next(ptr noundef %23)
  store ptr %24, ptr %7, align 8
  %25 = load ptr, ptr %7, align 8
  store ptr %25, ptr %9, align 8
  %26 = load i64, ptr %8, align 8
  %27 = load i64, ptr %9, align 8
  %28 = cmpxchg weak ptr @read_ptr, i64 %26, i64 %27 seq_cst seq_cst, align 8
  %29 = extractvalue { i64, i1 } %28, 0
  %30 = extractvalue { i64, i1 } %28, 1
  br i1 %30, label %32, label %31

31:                                               ; preds = %20
  store i64 %29, ptr %8, align 8
  br label %32

32:                                               ; preds = %31, %20
  %33 = zext i1 %30 to i8
  store i8 %33, ptr %10, align 1
  %34 = load i8, ptr %10, align 1
  %35 = trunc i8 %34 to i1
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  call void @process(ptr noundef %6)
  br label %37

37:                                               ; preds = %36, %32
  %38 = getelementptr inbounds %struct.timespec, ptr %11, i32 0, i32 0
  store i64 0, ptr %38, align 8
  %39 = call i32 @rand() #7
  %40 = sext i32 %39 to i64
  %41 = mul i64 100000000, %40
  %42 = udiv i64 %41, 2147483647
  %43 = getelementptr inbounds %struct.timespec, ptr %11, i32 0, i32 1
  store i64 %42, ptr %43, align 8
  %44 = call i32 @nanosleep(ptr noundef %11, ptr noundef null)
  br label %45

45:                                               ; preds = %37, %14
  br label %14
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @create_consumers(i32 noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca ptr, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, ptr %2, align 4
  %8 = load i32, ptr %2, align 4
  %9 = zext i32 %8 to i64
  %10 = call ptr @llvm.stacksave()
  store ptr %10, ptr %3, align 8
  %11 = alloca i64, i64 %9, align 16
  store i64 %9, ptr %4, align 8
  %12 = load i32, ptr %2, align 4
  %13 = zext i32 %12 to i64
  %14 = alloca i32, i64 %13, align 16
  store i64 %13, ptr %5, align 8
  store i32 0, ptr %7, align 4
  br label %15

15:                                               ; preds = %35, %1
  %16 = load i32, ptr %7, align 4
  %17 = load i32, ptr %2, align 4
  %18 = icmp slt i32 %16, %17
  br i1 %18, label %19, label %38

19:                                               ; preds = %15
  %20 = load i32, ptr %7, align 4
  %21 = load i32, ptr %7, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, ptr %14, i64 %22
  store i32 %20, ptr %23, align 4
  %24 = load i32, ptr %7, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i64, ptr %11, i64 %25
  %27 = load i32, ptr %7, align 4
  %28 = sext i32 %27 to i64
  %29 = inttoptr i64 %28 to ptr
  %30 = call i32 @pthread_create(ptr noundef %26, ptr noundef null, ptr noundef @consumer_main, ptr noundef %29) #7
  store i32 %30, ptr %6, align 4
  %31 = load i32, ptr %6, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %19
  call void @pthread_exit(ptr noundef null) #8
  unreachable

34:                                               ; preds = %19
  br label %35

35:                                               ; preds = %34
  %36 = load i32, ptr %7, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, ptr %7, align 4
  br label %15, !llvm.loop !8

38:                                               ; preds = %15
  %39 = load ptr, ptr %3, align 8
  call void @llvm.stackrestore(ptr %39)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #4

; Function Attrs: nounwind
declare i32 @pthread_create(ptr noundef, ptr noundef, ptr noundef, ptr noundef) #3

; Function Attrs: noreturn
declare void @pthread_exit(ptr noundef) #5

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  call void @init_ring_buffer()
  call void @create_consumers(i32 noundef 2)
  call void @producer_main()
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nocallback nofree nosync nounwind willreturn }
attributes #5 = { noreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { nounwind }
attributes #8 = { noreturn }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 17.0.0 (https://github.com/llvm/llvm-project.git 2f302ef6f869db0da647955799c864abb2c395ad)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
